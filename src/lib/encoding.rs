use std::{fs::File, io::BufReader};

use capnp::serialize::{self, OwnedSegments};
use crate::model_capnp::model;
use dfdx::tensor;

// Represents a capnp encoded Model file
pub struct ModelFile {
    message_reader: capnp::message::Reader<OwnedSegments>,
}

// TODO: this seems optimizable
// I'd need to remove the hardcoded values if I want to make this autogenerated.
// For that, some error handling would be required.
impl ModelFile {
    pub fn from(path: &str) -> Self {
        let file: File = File::open(path).unwrap();
        let reader =  BufReader::new(file);
        let message_reader = serialize::read_message(
            reader,
            ::capnp::message::ReaderOptions::new(),
        ).unwrap();
        Self { message_reader: message_reader }
    }

    pub fn read_layer1_weights(&self) -> tensor::Tensor2D<64, 4> {
      let model = self.message_reader.get_root::<model::Reader>().unwrap();
      let mut weights: [[f32; 4]; 64] = [[0.0; 4]; 64];
      for i in 0..64 {
        for j in 0..4 {
          weights[i][j] = model.get_layer1().unwrap().get_weights().unwrap().get(i.try_into().unwrap()).unwrap().get(j.try_into().unwrap());
        }
      }
      tensor::tensor(weights)
    }

    pub fn read_layer1_bias(&self) -> tensor::Tensor1D<64> {
      let model = self.message_reader.get_root::<model::Reader>().unwrap();
      let mut bias: [f32; 64] = [0.0; 64];
      for i in 0..64 {
          bias[i] = model.get_layer1().unwrap().get_bias().unwrap().get(i.try_into().unwrap());
      }
      tensor::tensor(bias)
    }

    pub fn read_layer2_weights(&self) -> tensor::Tensor2D<64, 64> {
      let model = self.message_reader.get_root::<model::Reader>().unwrap();
      let mut weights: [[f32; 64]; 64] = [[0.0; 64]; 64];
      for i in 0..64 {
        for j in 0..64 {
          weights[i][j] = model.get_layer2().unwrap().get_weights().unwrap().get(i.try_into().unwrap()).unwrap().get(j.try_into().unwrap());
        }
      }
      tensor::tensor(weights)
    }

    pub fn read_layer2_bias(&self) -> tensor::Tensor1D<64> {
      let model = self.message_reader.get_root::<model::Reader>().unwrap();
      let mut bias: [f32; 64] = [0.0; 64];
      for i in 0..64 {
          bias[i] = model.get_layer2().unwrap().get_bias().unwrap().get(i.try_into().unwrap());
      }
      tensor::tensor(bias)
    }

    pub fn read_layer3_weights(&self) -> tensor::Tensor2D<2, 64> {
      let model = self.message_reader.get_root::<model::Reader>().unwrap();
      let mut weights: [[f32; 64]; 2] = [[0.0; 64]; 2];
      for i in 0..2 {
        for j in 0..64 {
          weights[i][j] = model.get_layer3().unwrap().get_weights().unwrap().get(i.try_into().unwrap()).unwrap().get(j.try_into().unwrap());
        }
      }
      tensor::tensor(weights)
    }

    pub fn read_layer3_bias(&self) -> tensor::Tensor1D<2> {
      let model = self.message_reader.get_root::<model::Reader>().unwrap();
      let mut bias: [f32; 2] = [0.0; 2];
      for i in 0..2 {
          bias[i] = model.get_layer3().unwrap().get_bias().unwrap().get(i.try_into().unwrap());
      }
      tensor::tensor(bias)
    }
}